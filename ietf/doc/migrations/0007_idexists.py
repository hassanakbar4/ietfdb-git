# -*- coding: utf-8 -*-
# Generated by Django 1.11.16 on 2018-11-04 10:56
from __future__ import unicode_literals

from tqdm import tqdm

from django.db import migrations


def forward(apps, schema_editor):
    State = apps.get_model('doc','State')
    Document = apps.get_model('doc','Document')
    DocHistory = apps.get_model('doc','DocHistory')

    idexists = dict()
    idexists['draft-iesg'] = State.objects.create(
        type_id = 'draft-iesg',
        slug = 'idexists',
        name = 'I-D Exists',
        used = True,
        desc = 'The IESG has not started processing this draft, or has stopped processing it without publicastion.',
        order = 0,
    )
    idexists['draft-iesg'].next_states.set(State.objects.filter(type='draft-iesg',slug__in=['pub-req','watching']))

    for stream in ('ietf','irtf','ise','iab'):
        idexists['draft-stream-' + stream] = State.objects.create(
            type_id = 'draft-stream-' + stream,
            slug = 'idexists',
            name = 'I-D Exists',
            used = True,
            desc = 'The %s stream has not started processing this draft, or has stopped processing it without requesting publication.' % stream.upper(),
            order = 0,
        )
        if stream == 'ietf': # No IRTF, ISE, or IAB states currently have any next states
            idexists['draft-stream-ietf'].next_states.set(State.objects.filter(type='draft-stream-ietf', slug__in=('wg-cand','c-adopt','adopt-wg','info','wg-doc')))

    #for doc in tqdm(Document.objects.filter(type='draft'):
    #    for state_type in ('draft-iesg', 'draft-stream-ietf', 'draft-stream-irtf', 'draft-stream-ise', 'draft-stream-iab'):
    #        if not doc.states.filter(type=state_type).exists():
    #            doc.states.add(idexists[state_type])
    #    for dh in doc.history_set.all():
    #        for state_type in ('draft-iesg', 'draft-stream-ietf', 'draft-stream-irtf', 'draft-stream-ise', 'draft-stream-iab'):
    #            if not dh.states.filter(type=state_type).exists():
    #                dh.states.add(idexists[state_type])            

    drafts = Document.objects.filter(type_id='draft')
    draft_histories = DocHistory.objects.filter(type_id='draft')
    for state_type in tqdm(['draft-iesg','draft-stream-ietf','draft-stream-irtf', 'draft-stream-ise', 'draft-stream-iab']):
        for doc in tqdm(drafts.exclude(states__type_id=state_type)):
            doc.states.add(idexists[state_type])
        for history in tqdm(draft_histories.exclude(states__type_id=state_type)):
            history.states.add(idexists[state_type])



def reverse(apps, schema_editor):
    State = apps.get_model('doc','State')
    State.objects.filter(slug='idexists').delete()

class Migration(migrations.Migration):

    dependencies = [
        ('doc', '0006_ballotpositiondocevent_send_email'),
        ('review', '0003_add_notify_ad_when'),
    ]

    operations = [
        migrations.RunPython(forward, reverse)
    ]
